/*
 //withOut using Map
 class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
     
      TreeNode* root = helper(preorder , 0 , preorder.size()-1 , inorder , 0 , inorder.size()-1 );
      
      return root;
    }
  TreeNode* helper(vector<int> &preOrder , int preStart , int preEnd , vector<int> &inOrder , int inStart , int inEnd )
  {
    if(preStart > preEnd || inStart > inEnd) return NULL;
    
    TreeNode* root = new TreeNode(preOrder[preStart]);
    int index = 0;
    for(int i=0;i<inOrder.size();++i)
    {
      if(root->val == inOrder[i])
         index = i;
    }
    
    //int index = m[root->val];
    int numLeft = index - inStart;
    
    root->left = helper(preOrder , preStart + 1 , preStart + numLeft , inOrder , inStart , index - 1 );
    root->right = helper(preOrder , preStart + numLeft + 1 , preEnd  , inOrder , index + 1 , inEnd );
    
    return root;
  }
};
*/

/*
//Using map

class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
     map<int,int>unmap;
     for(int i=0;i<preorder.size();i++) unmap[inorder[i]] = i;
      
      TreeNode* root = helper(preorder , 0 , preorder.size()-1 , inorder , 0 , inorder.size()-1 , unmap);
      
      return root;
    }
  TreeNode* helper(vector<int> &preOrder , int preStart , int preEnd , vector<int> &inOrder , int inStart , int inEnd , map<int,int> &m)
  {
    if(preStart > preEnd || inStart > inEnd) return NULL;
    
    TreeNode* root = new TreeNode(preOrder[preStart]);
    
    int inRoot = m[root->val];
    int numLeft = inRoot - inStart;
    
    root->left = helper(preOrder , preStart + 1 , preStart + numLeft , inOrder , inStart , inRoot - 1 , m);
    root->right = helper(preOrder , preStart + numLeft + 1 , preEnd  , inOrder , inRoot + 1 , inEnd , m);
    
    return root;
  }
};
*/
