

//Recursion Approch

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool areEqual(TreeNode* r , TreeNode* s)
    {
      if(r == NULL || s == NULL) return (r == s);
      
      
      return r->val == s->val and (areEqual(r->left , s->left)) and (areEqual(r->right , s->right));
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        return areEqual(root , subRoot) || (root -> left and isSubtree(root->left , subRoot) || (root->right and isSubtree(root->right , subRoot)));
    }
};
